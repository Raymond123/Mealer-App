package com.mealer.app;

import android.os.Parcelable;

import com.google.firebase.database.DatabaseReference;

import java.util.HashMap;

public class ClientUser extends User implements Parcelable {

    // empty client user constructor required for firebase snapshots
    public ClientUser(){

    }

    // initializing attributes specific to clients
    private String cardNumber;
    private String cardExpiry;
    private String cardSecurity;
    private String dietaryRestriction;

    /**
     * client user constructor specific for when initializing a new user object
     * for a user that already exists in the firebase authentication and realtime database
     * @param attributes a hashmap containing the users
     *                   attributes pulled from the firebase realtime database
     */
    public ClientUser(HashMap<String, String> attributes){
        super(attributes.get("firstName"), attributes.get("lastName"),
                attributes.get("email"), attributes.get("userType"), attributes.get("city"),
                attributes.get("houseNumber"), attributes.get("street"));

        this.cardNumber = attributes.get("cardNumber");
        this.cardExpiry = attributes.get("cardExpiry");
        this.cardSecurity = attributes.get("cardSecurity");
        this.dietaryRestriction = attributes.get("dietaryRestriction");
    }

    /**
     * client user constructor for creating a new user and adding information to the firebase
     * realtime database
     * @param uID unique id generated by firebase authentication
     * @param userType this attribute is always "client" for this class,
     *                but having specific attribute allows for displaying type
     */
    public ClientUser(String firstName, String lastName, String email, String city, String houseNumber, String street,
                      String cardNumber, String cardExpiry, String cardSecurity, String uID, String userType){
        super(firstName, lastName, email, userType, city, houseNumber, street);
        this.cardNumber = cardNumber;
        this.cardExpiry = cardExpiry;
        this.cardSecurity = cardSecurity;
        this.dietaryRestriction = "none";

        // get database reference to the "users" tree
        DatabaseReference databaseReference = getReference("users");
        // add user to database under uID
        databaseReference.child(uID).setValue(this);
    }


    // get methods for client user specific attributes
    public String getCardNumber(){
        return this.cardNumber;
    }

    public String getCardExpiry(){
        return this.cardExpiry;
    }

    public String getCardSecurity(){
        return this.cardSecurity;
    }

    public String getDietaryRestriction() {
        return dietaryRestriction;
    }
}
